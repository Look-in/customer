SET foreign_key_checks = 0;
CREATE TABLE ITEM_STATUS(
                                                     ID INT PRIMARY KEY AUTO_INCREMENT,
                                                     STATUS VARCHAR(20) NOT NULL UNIQUE);
CREATE TABLE ITEM( 
                                      ID INT PRIMARY KEY AUTO_INCREMENT, 
                                      PRICE DOUBLE (7,2) UNSIGNED, 
                                      NAME VARCHAR(50),
                                      DESCRIPTION VARCHAR(150),
                                      ITEM_STATUS_ID INT,
                                          FOREIGN KEY (ITEM_STATUS_ID)
                                              REFERENCES ITEM_STATUS (ID)
                                                  ON DELETE CASCADE);
CREATE TABLE COUNTRY (
                                               ID INT PRIMARY KEY AUTO_INCREMENT, 
                                               COUNTRY VARCHAR(100)NOT NULL UNIQUE);
CREATE TABLE ADDRESS(
                                                ID INT PRIMARY KEY AUTO_INCREMENT, 
                                                COUNTRY_ID  INT, 
                                                    FOREIGN KEY (COUNTRY_ID)
                                                       REFERENCES COUNTRY (ID)
                                                            ON DELETE CASCADE,
                                                 ADDRESS VARCHAR(150),
                                                 CUSTOMER_ID INT, 
                                                             FOREIGN KEY (CUSTOMER_ID)
                                                                   REFERENCES CUSTOMER(ID)
                                                                         ON DELETE CASCADE,
                                                  DEFAULT_ADDR BOOLEAN);
CREATE TABLE ORDER_STATUS( 
                                                        ID INT PRIMARY KEY AUTO_INCREMENT,
                                                        STATUS VARCHAR(20) NOT NULL UNIQUE);
CREATE TABLE CUSTOMER(
                                                ID INT PRIMARY KEY AUTO_INCREMENT,
                                                LOGIN VARCHAR(50) NOT NULL UNIQUE,
                                                E_MAIL VARCHAR(50) NOT NULL UNIQUE);
CREATE TABLE ORDERS(
                                         ID INT PRIMARY KEY AUTO_INCREMENT,
                                         CUSTOMER_ID INT,
                                             FOREIGN KEY (CUSTOMER_ID)
                                               REFERENCES CUSTOMER (ID)
                                                   ON DELETE CASCADE,
                                         ORDER_STATUS_ID INT,
                                              FOREIGN KEY (ORDER_STATUS_ID)
                                                 REFERENCES ORDER_STATUS (ID)
                                                   ON DELETE CASCADE,
                                          UNIQUE KEY NDX_ORDER (ID,CUSTOMER_ID));
CREATE TABLE ORDER_ITEM(
                                                   ID INT  PRIMARY KEY  AUTO_INCREMENT,
                                                   ORDER_ID INT, 
                                                       FOREIGN KEY (ORDER_ID)
                                                         REFERENCES ORDERS(ID)
                                                            ON DELETE CASCADE,
                                                   ITEM_ID INT, 
                                                      FOREIGN KEY (ITEM_ID)
                                                        REFERENCES ITEM(ID)
                                                            ON DELETE CASCADE);
CREATE TABLE ORDER_PROCESSING_TIME(
                                         ID INT  PRIMARY KEY AUTO_INCREMENT,
                                         PROCESSING_TIME DATETIME,
                                         ORDER_ID INT, 
                                                       FOREIGN KEY (ORDER_ID)
                                                         REFERENCES ORDERS(ID)
                                                            ON DELETE CASCADE,
                                        ORDER_STATUS_ID INT,
                                              FOREIGN KEY (ORDER_STATUS_ID)
                                                 REFERENCES ORDER_STATUS (ID)
                                                   ON DELETE CASCADE,
                                         UNIQUE KEY NDX_ORDER_TIME (ORDER_ID,ORDER_STATUS_ID));
SET foreign_key_checks = 1;

CREATE TRIGGER ` AFTER_INSERT_ORDERS` AFTER INSERT ON `orders`
 FOR EACH ROW INSERT INTO ORDER_PROCESSING_TIME (ORDER_ID, ORDER_STATUS_ID, PROCESSING_TIME)
VALUES (NEW.ID, NEW.ORDER_STATUS_ID, NOW());

CREATE TRIGGER `AFTER_UPDATE_ORDERS` AFTER UPDATE ON `orders` FOR EACH ROW INSERT INTO ORDER_PROCESSING_TIME (ORDER_ID, ORDER_STATUS_ID, PROCESSING_TIME)
VALUES (NEW.ID, NEW.ORDER_STATUS_ID, NOW());


INSERT INTO ITEM_STATUS(STATUS) values ("in stock");
INSERT INTO ITEM_STATUS(STATUS) values ("out of stock");
INSERT INTO ITEM_STATUS(STATUS) values ("preorder");
INSERT INTO ITEM(PRICE,NAME,ITEM_STATUS_ID) values (9.75, "T-Shirt",1);
INSERT INTO ITEM(PRICE,NAME,ITEM_STATUS_ID) values (13.99, "Dress",1);
INSERT INTO ITEM(PRICE,NAME,ITEM_STATUS_ID) values (45.95, "Jeans",1);
INSERT INTO ITEM(PRICE,NAME,ITEM_STATUS_ID) values (60.9, "Gloves",1);
INSERT INTO ITEM(PRICE,NAME,ITEM_STATUS_ID) values (31, "Shirt",1);
INSERT INTO ITEM(PRICE,NAME,ITEM_STATUS_ID) values (14.9, "Tie",1);

INSERT INTO ORDER_STATUS(STATUS) values ("New");
INSERT INTO ORDER_STATUS(STATUS) values ("Pending Payment");
INSERT INTO ORDER_STATUS(STATUS) values ("Processing");
INSERT INTO ORDER_STATUS(STATUS) values ("Complete");
INSERT INTO ORDER_STATUS(STATUS) values ("Closed");
INSERT INTO ORDER_STATUS(STATUS) values ("Canceled");

INSERT INTO COUNTRY (COUNTRY) values ("Belarus");
INSERT INTO COUNTRY (COUNTRY) values ("Germany");
INSERT INTO COUNTRY (COUNTRY) values ("Russia");
INSERT INTO COUNTRY (COUNTRY) values ("United States");

INSERT INTO CUSTOMER(LOGIN , E_MAIL) values ("Login1","LOG1@tut.by");
INSERT INTO CUSTOMER(LOGIN , E_MAIL) values ("Login2","LOG2@tut.by");
INSERT INTO CUSTOMER(LOGIN , E_MAIL) values ("Login3","LOG3@tut.by");
INSERT INTO CUSTOMER(LOGIN , E_MAIL) values ("Login4","LOG4@tut.by");
INSERT INTO CUSTOMER(LOGIN , E_MAIL) values ("Login5","LOG5@tut.by");

INSERT INTO ADDRESS(COUNTRY_ID,ADDRESS,CUSTOMER_ID,DEFAULT_ADDR) values (1, "Vitebsk,Pobedy,10-1",1,1);
INSERT INTO ADDRESS(COUNTRY_ID,ADDRESS,CUSTOMER_ID,DEFAULT_ADDR) values (1, "Minsk,Nemiga,1-12",1,0);
INSERT INTO ADDRESS(COUNTRY_ID,ADDRESS,CUSTOMER_ID,DEFAULT_ADDR) values (1, "Gomel,Lenina,12-145",2,1);
INSERT INTO ADDRESS(COUNTRY_ID,ADDRESS,CUSTOMER_ID,DEFAULT_ADDR) values (1, "Gomel,Vatutina,1-115",3,1);
INSERT INTO ADDRESS(COUNTRY_ID,ADDRESS,CUSTOMER_ID,DEFAULT_ADDR) values (3, "Moscow,Tverskaya,15-19",4,1);
INSERT INTO ADDRESS(COUNTRY_ID,ADDRESS,CUSTOMER_ID,DEFAULT_ADDR) values (3, "SPB,Nemskiy,1-1",5,1);


INSERT INTO ORDERS(CUSTOMER_ID,ORDER_STATUS_ID) values (1,1);
INSERT INTO ORDERS(CUSTOMER_ID,ORDER_STATUS_ID) values (1,1);
INSERT INTO ORDERS(CUSTOMER_ID,ORDER_STATUS_ID) values (2,1);
INSERT INTO ORDERS(CUSTOMER_ID,ORDER_STATUS_ID) values (3,1);

INSERT INTO ORDER_ITEM(ORDER_ID,ITEM_ID) values (1,2);
INSERT INTO ORDER_ITEM(ORDER_ID,ITEM_ID) values (1,3);
INSERT INTO ORDER_ITEM(ORDER_ID,ITEM_ID) values (1,3);
INSERT INTO ORDER_ITEM(ORDER_ID,ITEM_ID) values (1,3);
INSERT INTO ORDER_ITEM(ORDER_ID,ITEM_ID) values (2,4);
INSERT INTO ORDER_ITEM(ORDER_ID,ITEM_ID) values (2,4);
INSERT INTO ORDER_ITEM(ORDER_ID,ITEM_ID) values (2,5);
INSERT INTO ORDER_ITEM(ORDER_ID,ITEM_ID) values (2,6);
INSERT INTO ORDER_ITEM(ORDER_ID,ITEM_ID) values (3,1);
INSERT INTO ORDER_ITEM(ORDER_ID,ITEM_ID) values (3,2);
INSERT INTO ORDER_ITEM(ORDER_ID,ITEM_ID) values (3,2);
INSERT INTO ORDER_ITEM(ORDER_ID,ITEM_ID) values (4,1);
INSERT INTO ORDER_ITEM(ORDER_ID,ITEM_ID) values (4,2);
INSERT INTO ORDER_ITEM(ORDER_ID,ITEM_ID) values (4,2);

ALTER TABLE ITEM ADD COLUMN img LONGBLOB;

update item set IMG=LOAD_FILE('d:/projects/arx/images/t-shirt.jpg') WHERE ID=1;
update item set IMG=LOAD_FILE('d:/projects/arx/images/dress.jpg') WHERE ID=2;

CREATE TABLE CLOTHES( 
                                      ID INT PRIMARY KEY, 
                                      SEASON VARCHAR(50),
                                          FOREIGN KEY (ID)
                                              REFERENCES ITEM (ID)
                                                  ON DELETE CASCADE);

INSERT INTO CLOTHES(ID,SEASON) VALUES (1,"SUMMER");
INSERT INTO CLOTHES(ID,SEASON) VALUES (2,"SUMMER");
INSERT INTO CLOTHES(ID,SEASON) VALUES (3,"SUMMER");
INSERT INTO CLOTHES(ID,SEASON) VALUES (4,"SUMMER");
INSERT INTO CLOTHES(ID,SEASON) VALUES (5,"SUMMER");
INSERT INTO CLOTHES(ID,SEASON) VALUES (6,"SUMMER");

CREATE TABLE ITEM_TYPE (
                                               ID INT PRIMARY KEY AUTO_INCREMENT, 
                                               ITEM_TYPE VARCHAR(100)NOT NULL UNIQUE);

INSERT INTO ITEM_TYPE(ITEM_TYPE) VALUES ("CLOTHES");
INSERT INTO ITEM_TYPE(ITEM_TYPE) VALUES ("BICYCLE");

ALTER TABLE ITEM ADD COLUMN ITEM_TYPE_ID INT, ADD CONSTRAINT FOREIGN KEY(ITEM_TYPE_ID) REFERENCES ITEM_TYPE(ID); 

update item set ITEM_TYPE_ID=1;

CREATE TABLE BICYCLE(ID INT PRIMARY KEY, 
                        FORK VARCHAR(50),
                        BRAKES VARCHAR(50),
                        FRAME VARCHAR(50),
                        FOREIGN KEY (ID)
                          REFERENCES ITEM (ID)
                            ON DELETE CASCADE);


SELECT orders.ORDERID,customers.NAME,DATE_OPEN,order_item.itemid,price,items.name,status FROM ((
              (orders INNER JOIN order_items 
                           ON orders.ORDERID=order_items.ORDERID)
            inner join items 
                           on items.ITEMID=order_items.ITEMID)
            inner join itemstatuses 
                           on itemstatuses.ITEMSTATUSID=items.ITEMSTATUSID)
            INNER JOIN customers 
                           on customers.CUSTOMID=orders.CUSTOMID
                                 WHERE orders.ORDERID=1 
                                 order by items.PRICE;


